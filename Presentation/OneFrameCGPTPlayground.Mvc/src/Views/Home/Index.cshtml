@using OneFrameCGPTPlayground.Mvc.Controllers
@using KocSistem.OneFrame.I18N
@model OneFrameCGPTPlayground.Mvc.Models.Home.UploadModel
@inject IKsStringLocalizer<HomeController> _localizer
@{
    ViewData["Title"] = _localizer["HomePage"];
}
@section scripts
    {
    <script src="~/metronic/assets/js/widgets.bundle.js"></script>
    <script src="~/metronic/assets/js/custom/widgets.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.9.3/min/dropzone.min.js"></script>
}
@section pageActions
    {

}
<div class="row gy-5 g-xl-8">
    <div class="col-12">
        <form action="http://localhost:44308/chatgpt/compare"
              enctype="multipart/form-data"
              onsubmit="AJAXSubmit(this);return false;"
              method="post">
            <div class="card shadow-sm">
                <div class="card-header">
                    <h3 class="card-title">@(_localizer["UploadFilesTitle"]) </h3>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-6">
                            <dl>
                                <dt>
                                    <label asp-for="SourceFile">@(_localizer["SrcFileInfo"])</label>
                                </dt>
                                <dd>
                                    @Html.EditorFor(m => m.SourceFile, new { type = "file" })
                                </dd>
                            </dl>
                        </div>
                        <div class="col-6">
                            <dl>
                                <dt>
                                    <label asp-for="TargetFile">@(_localizer["TargetFileInfo"])</label>
                                </dt>
                                <dd>
                                    @Html.EditorFor(m => m.TargetFile, new { type = "file" })
                                </dd>
                            </dl>
                        </div>
                    </div>
                </div>
                <div class="card-footer">
                    <button class="btn btn-success" id="btnUpload" type="submit" value="Upload">@(_localizer["Upload"])</button>
                </div>
            </div>
            <div class="card shadow-sm mt-5 d-none">
                <div class="card-header">
                    <h3 class="card-title">
                        @(_localizer["ComparisonResult"])
                    </h3>
                </div>
                <div class="card-body">
                    <div id="txtResult"></div>
                </div>
            </div>
        </form>
    </div>
</div>
<script type="text/javascript">
    toastr.options = {
        "closeButton": true,
        "debug": false,
        "newestOnTop": false,
        "progressBar": true,
        "positionClass": "toastr-top-right",
        "preventDuplicates": true,
        "onclick": null,
        "showDuration": "300",
        "hideDuration": "1000",
        "timeOut": "5000",
        "extendedTimeOut": "1000",
        "showEasing": "swing",
        "hideEasing": "linear",
        "showMethod": "fadeIn",
        "hideMethod": "fadeOut"
    };
    var blockUI;
    function isBlankStr(str) {
        if (str === null) {
            return true;
        }

        return (!str || /^\s*$/.test(str));
    }
    function ShowLoading(message) {
        try {
            if (blockUI.isBlocked()) {
                return;
            }
        } catch (e) {
            //console.log(e);
        }

        blockUI = null;
        var target = document.querySelector("body"),
            msg = '<div class="blockui-message"><span class="spinner-border m-0 text-primary"></span></div>';
        if (!window.isBlankStr(message)) {
            msg = '<div class="blockui-message"><span class="spinner-border text-primary"></span><span class="px-2">' + message + '</span></div>';
        }

        blockUI = new KTBlockUI(target, {
            message: msg,
            showOverlay: true,
            centerX: true,
            centerY: true,
            css: {
                'z-index': 99999,
                'border': '0',
                'padding': '0',
                'backgroundColor': 'none'
            },
            overlayCSS: {
                'z-index': 99998,
                'backgroundColor': '#555',
                'opacity': 0.5,
                'cursor': 'wait'
            }
        });

        if (!blockUI.isBlocked()) {
            blockUI.block();
        }
    }

    function HideLoading() {
        setTimeout(function () {
            if (blockUI.isBlocked()) {
                blockUI.release();
                blockUI.destroy();
            }
        }, 250);
    }

    async function AJAXSubmit(oFormElement) {
        ShowLoading("@(_localizer["Processing"])");
        var resultElement = oFormElement.elements.namedItem("result");
        const formData = new FormData(oFormElement);

        try {
            compare(formData).then(function(response){ 
                if (response.isSuccessful) {
                    toastr.success("", "@(_localizer["ToastrSuccess"])");
                    $("#txtResult").html(response.result);
                    $("#txtResult").closest(".card.d-none").removeClass("d-none");
                }else {
                    toastr.error(response.errorInfo.message, "@(_localizer["ToastrError"])");
                }
                HideLoading();
            });
        } catch (error) {
            toastr.error(error, "@(_localizer["ToastrError"])");
            HideLoading();
        }
    }

    async function compare(data) {
        const response = await fetch('http://localhost:44308/chatgpt/compare', {
            method: 'POST',
            body: data
        });

        const serviceResponse = await response.json();
        return serviceResponse;
    }
</script>
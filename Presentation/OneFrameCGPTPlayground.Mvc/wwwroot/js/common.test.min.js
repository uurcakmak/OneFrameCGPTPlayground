var common=require("./common.js");beforeEach(()=>{jest.clearAllMocks()}),test("NullControl returns true",()=>{expect(common.NullControl(null)).toBeTruthy()}),test("NullControl returns false",()=>{expect(common.NullControl("Not Null")).toBeFalsy()}),test("getUrlParameter returns null",()=>{expect(common.getUrlParameter("")).toBeFalsy()}),test("encodeJSON returns string",()=>{expect(common.encodeJSON({x:5,y:6})).toBe('{"x":5,"y":6}')}),test("encodeJSON returns undefined when there is an error",()=>{var e={};e.a={b:e},expect(common.encodeJSON(e)).toBeUndefined()}),test("decodeJSON returns object",()=>{expect(common.decodeJSON('{"x":5,"y":6}')).toStrictEqual({x:5,y:6})}),test("decodeJSON returns undefined when there is a syntax error",()=>{expect(common.decodeJSON()).toBeUndefined()}),test("FindValueInArray returns value",()=>{expect(common.Common.FindValueInArray([{name:"string 1",value:"value 1"},{name:"string 2",value:"value 2"}],"string 1")).toBe("value 1")}),test("AjaxFailureCallback is successfull",()=>{var e=new XMLHttpRequest;e.responseJSON={error:{message:"message",details:"details",validationErrors:"validationErrors"}},common.Common.DisplaySuccess=jest.fn(),expect(()=>common.Common.AjaxFailureCallback(e,"status","error")).not.toThrow()}),test("DisplaySuccess is successfull when element is undefined",()=>{var e={message:"message",type:"Info"};$=jest.fn().mockReturnValueOnce(void 0),toastr=jest.fn(),toastr.info=jest.fn().mockReturnValueOnce(Object),expect(()=>common.Common.DisplaySuccess(e)).not.toThrow()}),test("Ajax is successfull when element is undefined",()=>{$=jest.fn(),$.ajax=jest.fn(),expect(()=>common.Common.Ajax("Delete",null,null,null,null,null,null,null,null)).not.toThrow()}),test("MultipleEmailRegexWithComma returns false",()=>{expect(common.MultipleEmailRegexWithComma("test1@kocsistem.com.tr,test2@kocsistem.com.tr")).toBeTruthy()}),test("showNotification is successfull when type is Info",()=>{toastr=jest.fn(),toastr.info=jest.fn().mockReturnValueOnce(Object),expect(()=>common.showNotification("message","Info")).not.toThrow()}),test("showNotification is successfull when type is Success",()=>{toastr=jest.fn(),toastr.success=jest.fn().mockReturnValueOnce(Object),expect(()=>common.showNotification("message","Success")).not.toThrow()}),test("showNotification is successfull when type is Warning",()=>{toastr=jest.fn(),toastr.warning=jest.fn().mockReturnValueOnce(Object),expect(()=>common.showNotification("message","Warning")).not.toThrow()}),test("showNotification is successfull when type is Error",()=>{toastr=jest.fn(),toastr.error=jest.fn().mockReturnValueOnce(Object),expect(()=>common.showNotification("message","Error")).not.toThrow()}),test("showNotification is successfull when there is no type",()=>{toastr=jest.fn(),toastr.info=jest.fn().mockReturnValueOnce(Object),expect(()=>common.showNotification("message")).not.toThrow()}),test("InfoBox is successfull",()=>{Swal=jest.fn(),Swal.fire=jest.fn();L=jest.fn().mockReturnValueOnce("Ok"),expect(()=>common.InfoBox("message")).not.toThrow()}),test("SerializeJsonObject returns objectData",()=>{var e=document.createElement("form");e.setAttribute("test1","1"),e.setAttribute("test2","2"),e.serializeArray=jest.fn().mockReturnValueOnce(["test1","test2"]),$=jest.fn(),$.each=jest.fn(),expect(common.Common.SerializeJsonObject(e)).toStrictEqual({})}),test("ByteArrayToFileDownload is successfull",()=>{var e={fileByteArray:["00011011010000101000101100101010"]};window.URL.createObjectURL=jest.fn(),expect(()=>common.Common.ByteArrayToFileDownload(e)).not.toThrow()}),test("serializeObjectSubObject is successfull when isArray is false",()=>{var e={};value="value",expect(()=>common.serializeObjectSubObject(e,"string.",value)).not.toThrow()}),test("serializeObjectSubObject is successfull when isArray is true",()=>{var e={};value="value",expect(()=>common.serializeObjectSubObject(e,"[1,2,3].string",value)).not.toThrow()}),test("serializeObjectSubObject is successfull when key.indexOf('.') !== -1 is false",()=>{var e={};value="value",expect(()=>common.serializeObjectSubObject(e,"string",value)).not.toThrow()}),test("serializeObjectSubObject is successfull when key.indexOf('.') !== -1 is false and key.indexOf('[') !== -1 is true",()=>{var e={};value="value",expect(()=>common.serializeObjectSubObject(e,"string[",value)).not.toThrow()});
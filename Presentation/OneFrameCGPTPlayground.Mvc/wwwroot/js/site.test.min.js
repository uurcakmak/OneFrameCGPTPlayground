var site=require("./site.js");beforeEach(()=>{jest.clearAllMocks()}),test("notEmpty returns Required message when fieldName is null",()=>{var e="Required";L=jest.fn().mockReturnValueOnce(e),expect(site.ValidationMessages.notEmpty(null)).toStrictEqual({message:e})}),test("notEmpty returns Required2 message",()=>{var e="Required2";L=jest.fn().mockReturnValueOnce(e),expect(site.ValidationMessages.notEmpty("fieldName")).toStrictEqual({message:e})}),test("emailValidation returns EmailValidationMessage message when fieldName is null",()=>{var e="EmailValidationMessage";L=jest.fn().mockReturnValueOnce(e),expect(site.ValidationMessages.emailValidation(null)).toStrictEqual({message:e})}),test("emailValidation returns InvalidEmail message",()=>{var e="InvalidEmail";L=jest.fn().mockReturnValueOnce(e),expect(site.ValidationMessages.emailValidation("fieldName")).toStrictEqual({message:e})}),test("stringLength returns MinLengthValidationMessage message when length is 0",()=>{var e="MinLengthValidationMessage";L=jest.fn().mockReturnValue(e),expect(site.ValidationMessages.stringLength(0)).toStrictEqual({message:e,min:0})}),test("stringLength returns MinLengthValidationMessage message when length is different from 0",()=>{var e="MinLengthValidationMessage";L=jest.fn().mockReturnValue(e),expect(site.ValidationMessages.stringLength(3)).toStrictEqual({message:e,min:3})});